// ignore_for_file: non_constant_identifier_names, camel_case_types, file_namesimport, file_names, unnecessary_null_comparison
// WARNING: This code is auto-generated by Supadart.
// WARNING: Modifications may be overwritten. Please make changes in the Supadart configuration.
import 'supadart_header.dart';

class Flags implements SupadartClass<Flags> {
  final BigInt id;
  final BigInt? cafeId;
  final String flag;
  final DateTime? createdAt;
  final DateTime? updatedAt;
  final DateTime? deletedAt;

  const Flags({
    required this.id,
    this.cafeId,
    required this.flag,
    this.createdAt,
    this.updatedAt,
    this.deletedAt,
  });

  static String get table_name => 'flags';
  static String get c_id => 'id';
  static String get c_cafeId => 'cafe_id';
  static String get c_flag => 'flag';
  static String get c_createdAt => 'created_at';
  static String get c_updatedAt => 'updated_at';
  static String get c_deletedAt => 'deleted_at';

  static List<Flags> converter(List<Map<String, dynamic>> data) {
    return data.map(Flags.fromJson).toList();
  }

  static Flags converterSingle(Map<String, dynamic> data) {
    return Flags.fromJson(data);
  }

  static Map<String, dynamic> _generateMap({
    BigInt? id,
    BigInt? cafeId,
    String? flag,
    DateTime? createdAt,
    DateTime? updatedAt,
    DateTime? deletedAt,
  }) {
    return {
      if (id != null) 'id': id.toString(),
      if (cafeId != null) 'cafe_id': cafeId.toString(),
      if (flag != null) 'flag': flag,
      if (createdAt != null) 'created_at': createdAt.toUtc().toIso8601String(),
      if (updatedAt != null) 'updated_at': updatedAt.toUtc().toIso8601String(),
      if (deletedAt != null) 'deleted_at': deletedAt.toUtc().toIso8601String(),
    };
  }

  static Map<String, dynamic> insert({
    BigInt? id,
    BigInt? cafeId,
    required String flag,
    DateTime? createdAt,
    DateTime? updatedAt,
    DateTime? deletedAt,
  }) {
    return _generateMap(
      id: id,
      cafeId: cafeId,
      flag: flag,
      createdAt: createdAt,
      updatedAt: updatedAt,
      deletedAt: deletedAt,
    );
  }

  static Map<String, dynamic> update({
    BigInt? id,
    BigInt? cafeId,
    String? flag,
    DateTime? createdAt,
    DateTime? updatedAt,
    DateTime? deletedAt,
  }) {
    return _generateMap(
      id: id,
      cafeId: cafeId,
      flag: flag,
      createdAt: createdAt,
      updatedAt: updatedAt,
      deletedAt: deletedAt,
    );
  }

  factory Flags.fromJson(Map<String, dynamic> jsonn) {
    return Flags(
      id: jsonn['id'] != null
          ? BigInt.parse(jsonn['id'].toString())
          : BigInt.from(0),
      cafeId: jsonn['cafe_id'] != null
          ? BigInt.parse(jsonn['cafe_id'].toString())
          : BigInt.from(0),
      flag: jsonn['flag'] != null ? jsonn['flag'].toString() : '',
      createdAt: jsonn['created_at'] != null
          ? DateTime.parse(jsonn['created_at'].toString())
          : DateTime.fromMillisecondsSinceEpoch(0),
      updatedAt: jsonn['updated_at'] != null
          ? DateTime.parse(jsonn['updated_at'].toString())
          : DateTime.fromMillisecondsSinceEpoch(0),
      deletedAt: jsonn['deleted_at'] != null
          ? DateTime.parse(jsonn['deleted_at'].toString())
          : DateTime.fromMillisecondsSinceEpoch(0),
    );
  }

  Map<String, dynamic> toJson() {
    return _generateMap(
      id: id,
      cafeId: cafeId,
      flag: flag,
      createdAt: createdAt,
      updatedAt: updatedAt,
      deletedAt: deletedAt,
    );
  }

  Flags copyWith({
    BigInt? id,
    BigInt? cafeId,
    String? flag,
    DateTime? createdAt,
    DateTime? updatedAt,
    DateTime? deletedAt,
  }) {
    return Flags(
      id: id ?? this.id,
      cafeId: cafeId ?? this.cafeId,
      flag: flag ?? this.flag,
      createdAt: createdAt ?? this.createdAt,
      updatedAt: updatedAt ?? this.updatedAt,
      deletedAt: deletedAt ?? this.deletedAt,
    );
  }
}
